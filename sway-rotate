#!/bin/python3

# This is free and unencumbered software released into the public domain.
# 
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
# 
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
# 
# For more information, please refer to <http://unlicense.org>

import os
import json

#The rotation order, in the format 
# From:To 
#Remember that 'normal' is used instead of '0' for some reason. 
#They should be strings. 
sway_screen_rotate_transitions={
'normal':'90',
'90':'normal'
}


def sway_screen_rotate(transitions):
    # Get active monitor info.
    # It seems to come in as a json list of lists, with the outermost list corresponding 
    # individual monitors. So we use a bit of an ugly hack -- loading, peeling off the outermost level, then 
    # dumping that to a string an re-loading  it. Silly but it works. 
    for monitor in json.loads(os.popen('swaymsg -t get_outputs').read()):
        if json.loads(json.dumps(monitor))['focused']==True:
            # Print the command to be run. 
            print('swaymsg output ' + monitor['name'] + ' transform ' + transitions[monitor['transform']])
            # Actually run it by issuing a command using swaymsg. 
            print(os.popen('swaymsg output ' + monitor['name'] + ' transform ' + transitions[monitor['transform']]).read())
            return
    print("Could not find an active monitor? Sorry.")

if __name__ == "__main__":
    sway_screen_rotate(sway_screen_rotate_transitions)  
